package com.gaochlei.mulmusic.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_PLAY_MUSIC".
*/
public class LastPlayMusicDao extends AbstractDao<LastPlayMusic, Long> {

    public static final String TABLENAME = "LAST_PLAY_MUSIC";

    /**
     * Properties of entity LastPlayMusic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PlayCount = new Property(1, int.class, "playCount", false, "PLAYCOUNT");
        public final static Property Size = new Property(2, long.class, "size", false, "SIZE");
        public final static Property Like = new Property(3, int.class, "like", false, "LIKE");
        public final static Property PlayOrder = new Property(4, int.class, "playOrder", false, "PLAYORDER");
        public final static Property Duration = new Property(5, int.class, "duration", false, "DURATION");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Artic = new Property(7, String.class, "artic", false, "ARTIC");
        public final static Property AlbumId = new Property(8, long.class, "albumId", false, "ALBUMID");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Album = new Property(10, String.class, "album", false, "ALBUM");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
        public final static Property Other = new Property(12, String.class, "other", false, "OTHER");
        public final static Property LastPlayedId = new Property(13, long.class, "lastPlayedId", false, "LASTPLAYEDID");
        public final static Property Playedrate = new Property(14, double.class, "playedrate", false, "PLAYEDRATE");
        public final static Property ListId = new Property(15, long.class, "listId", false, "LISTID");
        public final static Property Position = new Property(16, int.class, "position", false, "POSITION");
        public final static Property SortId = new Property(17, long.class, "sortId", false, "SORTID");
    }


    public LastPlayMusicDao(DaoConfig config) {
        super(config);
    }
    
    public LastPlayMusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_PLAY_MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PLAYCOUNT\" INTEGER NOT NULL ," + // 1: playCount
                "\"SIZE\" INTEGER NOT NULL ," + // 2: size
                "\"LIKE\" INTEGER NOT NULL ," + // 3: like
                "\"PLAYORDER\" INTEGER NOT NULL ," + // 4: playOrder
                "\"DURATION\" INTEGER NOT NULL ," + // 5: duration
                "\"URL\" TEXT," + // 6: url
                "\"ARTIC\" TEXT," + // 7: artic
                "\"ALBUMID\" INTEGER NOT NULL ," + // 8: albumId
                "\"TITLE\" TEXT," + // 9: title
                "\"ALBUM\" TEXT," + // 10: album
                "\"NAME\" TEXT," + // 11: name
                "\"OTHER\" TEXT," + // 12: other
                "\"LASTPLAYEDID\" INTEGER NOT NULL ," + // 13: lastPlayedId
                "\"PLAYEDRATE\" REAL NOT NULL ," + // 14: playedrate
                "\"LISTID\" INTEGER NOT NULL ," + // 15: listId
                "\"POSITION\" INTEGER NOT NULL ," + // 16: position
                "\"SORTID\" INTEGER NOT NULL );"); // 17: sortId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_PLAY_MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastPlayMusic entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPlayCount());
        stmt.bindLong(3, entity.getSize());
        stmt.bindLong(4, entity.getLike());
        stmt.bindLong(5, entity.getPlayOrder());
        stmt.bindLong(6, entity.getDuration());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String artic = entity.getArtic();
        if (artic != null) {
            stmt.bindString(8, artic);
        }
        stmt.bindLong(9, entity.getAlbumId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(11, album);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(13, other);
        }
        stmt.bindLong(14, entity.getLastPlayedId());
        stmt.bindDouble(15, entity.getPlayedrate());
        stmt.bindLong(16, entity.getListId());
        stmt.bindLong(17, entity.getPosition());
        stmt.bindLong(18, entity.getSortId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastPlayMusic entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPlayCount());
        stmt.bindLong(3, entity.getSize());
        stmt.bindLong(4, entity.getLike());
        stmt.bindLong(5, entity.getPlayOrder());
        stmt.bindLong(6, entity.getDuration());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String artic = entity.getArtic();
        if (artic != null) {
            stmt.bindString(8, artic);
        }
        stmt.bindLong(9, entity.getAlbumId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(11, album);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(13, other);
        }
        stmt.bindLong(14, entity.getLastPlayedId());
        stmt.bindDouble(15, entity.getPlayedrate());
        stmt.bindLong(16, entity.getListId());
        stmt.bindLong(17, entity.getPosition());
        stmt.bindLong(18, entity.getSortId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LastPlayMusic readEntity(Cursor cursor, int offset) {
        LastPlayMusic entity = new LastPlayMusic( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // playCount
            cursor.getLong(offset + 2), // size
            cursor.getInt(offset + 3), // like
            cursor.getInt(offset + 4), // playOrder
            cursor.getInt(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // artic
            cursor.getLong(offset + 8), // albumId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // album
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // other
            cursor.getLong(offset + 13), // lastPlayedId
            cursor.getDouble(offset + 14), // playedrate
            cursor.getLong(offset + 15), // listId
            cursor.getInt(offset + 16), // position
            cursor.getLong(offset + 17) // sortId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastPlayMusic entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPlayCount(cursor.getInt(offset + 1));
        entity.setSize(cursor.getLong(offset + 2));
        entity.setLike(cursor.getInt(offset + 3));
        entity.setPlayOrder(cursor.getInt(offset + 4));
        entity.setDuration(cursor.getInt(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArtic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAlbumId(cursor.getLong(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAlbum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOther(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLastPlayedId(cursor.getLong(offset + 13));
        entity.setPlayedrate(cursor.getDouble(offset + 14));
        entity.setListId(cursor.getLong(offset + 15));
        entity.setPosition(cursor.getInt(offset + 16));
        entity.setSortId(cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LastPlayMusic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LastPlayMusic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastPlayMusic entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
